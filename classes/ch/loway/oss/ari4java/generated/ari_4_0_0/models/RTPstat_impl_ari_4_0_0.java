package ch.loway.oss.ari4java.generated.ari_4_0_0.models;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Fri Oct 04 11:51:52 CEST 2019
// ----------------------------------------------------

import ch.loway.oss.ari4java.generated.*;
import ch.loway.oss.ari4java.generated.Module;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**********************************************************
 * A statistics of a RTP.
 * 
 * Defined in file: channels.json
 * Generated by: Model
 *********************************************************/

public class RTPstat_impl_ari_4_0_0 implements RTPstat, java.io.Serializable {
private static final long serialVersionUID = 1L;
  /**  The Asterisk channel's unique ID that owns this instance.  */
  private String channel_uniqueid;
 public String getChannel_uniqueid() {
   return channel_uniqueid;
 }

 @JsonDeserialize( as=String.class )
 public void setChannel_uniqueid(String val ) {
   channel_uniqueid = val;
 }

  /**  Maximum jitter on local side.  */
  private double local_maxjitter;
 public double getLocal_maxjitter() {
   return local_maxjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_maxjitter(double val ) {
   local_maxjitter = val;
 }

  /**  Maximum number of packets lost on local side.  */
  private double local_maxrxploss;
 public double getLocal_maxrxploss() {
   return local_maxrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_maxrxploss(double val ) {
   local_maxrxploss = val;
 }

  /**  Minimum jitter on local side.  */
  private double local_minjitter;
 public double getLocal_minjitter() {
   return local_minjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_minjitter(double val ) {
   local_minjitter = val;
 }

  /**  Minimum number of packets lost on local side.  */
  private double local_minrxploss;
 public double getLocal_minrxploss() {
   return local_minrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_minrxploss(double val ) {
   local_minrxploss = val;
 }

  /**  Average jitter on local side.  */
  private double local_normdevjitter;
 public double getLocal_normdevjitter() {
   return local_normdevjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_normdevjitter(double val ) {
   local_normdevjitter = val;
 }

  /**  Average number of packets lost on local side.  */
  private double local_normdevrxploss;
 public double getLocal_normdevrxploss() {
   return local_normdevrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_normdevrxploss(double val ) {
   local_normdevrxploss = val;
 }

  /**  Our SSRC.  */
  private int local_ssrc;
 public int getLocal_ssrc() {
   return local_ssrc;
 }

 @JsonDeserialize( as=int.class )
 public void setLocal_ssrc(int val ) {
   local_ssrc = val;
 }

  /**  Standard deviation jitter on local side.  */
  private double local_stdevjitter;
 public double getLocal_stdevjitter() {
   return local_stdevjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_stdevjitter(double val ) {
   local_stdevjitter = val;
 }

  /**  Standard deviation packets lost on local side.  */
  private double local_stdevrxploss;
 public double getLocal_stdevrxploss() {
   return local_stdevrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setLocal_stdevrxploss(double val ) {
   local_stdevrxploss = val;
 }

  /**  Maximum round trip time.  */
  private double maxrtt;
 public double getMaxrtt() {
   return maxrtt;
 }

 @JsonDeserialize( as=double.class )
 public void setMaxrtt(double val ) {
   maxrtt = val;
 }

  /**  Minimum round trip time.  */
  private double minrtt;
 public double getMinrtt() {
   return minrtt;
 }

 @JsonDeserialize( as=double.class )
 public void setMinrtt(double val ) {
   minrtt = val;
 }

  /**  Average round trip time.  */
  private double normdevrtt;
 public double getNormdevrtt() {
   return normdevrtt;
 }

 @JsonDeserialize( as=double.class )
 public void setNormdevrtt(double val ) {
   normdevrtt = val;
 }

  /**  Maximum jitter on remote side.  */
  private double remote_maxjitter;
 public double getRemote_maxjitter() {
   return remote_maxjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_maxjitter(double val ) {
   remote_maxjitter = val;
 }

  /**  Maximum number of packets lost on remote side.  */
  private double remote_maxrxploss;
 public double getRemote_maxrxploss() {
   return remote_maxrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_maxrxploss(double val ) {
   remote_maxrxploss = val;
 }

  /**  Minimum jitter on remote side.  */
  private double remote_minjitter;
 public double getRemote_minjitter() {
   return remote_minjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_minjitter(double val ) {
   remote_minjitter = val;
 }

  /**  Minimum number of packets lost on remote side.  */
  private double remote_minrxploss;
 public double getRemote_minrxploss() {
   return remote_minrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_minrxploss(double val ) {
   remote_minrxploss = val;
 }

  /**  Average jitter on remote side.  */
  private double remote_normdevjitter;
 public double getRemote_normdevjitter() {
   return remote_normdevjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_normdevjitter(double val ) {
   remote_normdevjitter = val;
 }

  /**  Average number of packets lost on remote side.  */
  private double remote_normdevrxploss;
 public double getRemote_normdevrxploss() {
   return remote_normdevrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_normdevrxploss(double val ) {
   remote_normdevrxploss = val;
 }

  /**  Their SSRC.  */
  private int remote_ssrc;
 public int getRemote_ssrc() {
   return remote_ssrc;
 }

 @JsonDeserialize( as=int.class )
 public void setRemote_ssrc(int val ) {
   remote_ssrc = val;
 }

  /**  Standard deviation jitter on remote side.  */
  private double remote_stdevjitter;
 public double getRemote_stdevjitter() {
   return remote_stdevjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_stdevjitter(double val ) {
   remote_stdevjitter = val;
 }

  /**  Standard deviation packets lost on remote side.  */
  private double remote_stdevrxploss;
 public double getRemote_stdevrxploss() {
   return remote_stdevrxploss;
 }

 @JsonDeserialize( as=double.class )
 public void setRemote_stdevrxploss(double val ) {
   remote_stdevrxploss = val;
 }

  /**  Total round trip time.  */
  private double rtt;
 public double getRtt() {
   return rtt;
 }

 @JsonDeserialize( as=double.class )
 public void setRtt(double val ) {
   rtt = val;
 }

  /**  Number of packets received.  */
  private int rxcount;
 public int getRxcount() {
   return rxcount;
 }

 @JsonDeserialize( as=int.class )
 public void setRxcount(int val ) {
   rxcount = val;
 }

  /**  Jitter on received packets.  */
  private double rxjitter;
 public double getRxjitter() {
   return rxjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setRxjitter(double val ) {
   rxjitter = val;
 }

  /**  Number of octets received.  */
  private int rxoctetcount;
 public int getRxoctetcount() {
   return rxoctetcount;
 }

 @JsonDeserialize( as=int.class )
 public void setRxoctetcount(int val ) {
   rxoctetcount = val;
 }

  /**  Number of received packets lost.  */
  private int rxploss;
 public int getRxploss() {
   return rxploss;
 }

 @JsonDeserialize( as=int.class )
 public void setRxploss(int val ) {
   rxploss = val;
 }

  /**  Standard deviation round trip time.  */
  private double stdevrtt;
 public double getStdevrtt() {
   return stdevrtt;
 }

 @JsonDeserialize( as=double.class )
 public void setStdevrtt(double val ) {
   stdevrtt = val;
 }

  /**  Number of packets transmitted.  */
  private int txcount;
 public int getTxcount() {
   return txcount;
 }

 @JsonDeserialize( as=int.class )
 public void setTxcount(int val ) {
   txcount = val;
 }

  /**  Jitter on transmitted packets.  */
  private double txjitter;
 public double getTxjitter() {
   return txjitter;
 }

 @JsonDeserialize( as=double.class )
 public void setTxjitter(double val ) {
   txjitter = val;
 }

  /**  Number of octets transmitted.  */
  private int txoctetcount;
 public int getTxoctetcount() {
   return txoctetcount;
 }

 @JsonDeserialize( as=int.class )
 public void setTxoctetcount(int val ) {
   txoctetcount = val;
 }

  /**  Number of transmitted packets lost.  */
  private int txploss;
 public int getTxploss() {
   return txploss;
 }

 @JsonDeserialize( as=int.class )
 public void setTxploss(int val ) {
   txploss = val;
 }

/** No missing signatures from interface */
}

