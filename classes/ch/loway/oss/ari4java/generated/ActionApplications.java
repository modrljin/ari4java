package ch.loway.oss.ari4java.generated;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Fri Oct 04 11:51:52 CEST 2019
// ----------------------------------------------------

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import ch.loway.oss.ari4java.tools.RestException;
import ch.loway.oss.ari4java.tools.AriCallback;
import ch.loway.oss.ari4java.tools.tags.*;
import ch.loway.oss.ari4java.generated.Module;

/**********************************************************
 * 
 * Generated by: JavaInterface
 *********************************************************/


public interface ActionApplications {

// List<Application> list
/**********************************************************
 * List all applications.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public List<Application> list() throws RestException;



// void filter String String AriCallback<Application> callback
/**********************************************************
 * 
 * 
 * @since ari_4_0_0
 *********************************************************/
public void filter(String applicationName, String filter, AriCallback<Application> callback);



// void unsubscribe String String AriCallback<Application> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void unsubscribe(String applicationName, String eventSource, AriCallback<Application> callback);



// void subscribe String String AriCallback<Application> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void subscribe(String applicationName, String eventSource, AriCallback<Application> callback);



// void get String AriCallback<Application> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void get(String applicationName, AriCallback<Application> callback);



// Application get String
/**********************************************************
 * Get details of an application.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public Application get(String applicationName) throws RestException;



// Application unsubscribe String String
/**********************************************************
 * Unsubscribe an application from an event source.
 * Returns the state of the application after the subscriptions have changed
 * 
 * @since ari_0_0_1
 *********************************************************/
public Application unsubscribe(String applicationName, String eventSource) throws RestException;



// void list AriCallback<List<Application>> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void list(AriCallback<List<Application>> callback);



// Application subscribe String String
/**********************************************************
 * Subscribe an application to a event source.
 * Returns the state of the application after the subscriptions have changed
 * 
 * @since ari_0_0_1
 *********************************************************/
public Application subscribe(String applicationName, String eventSource) throws RestException;



// Application filter String String
/**********************************************************
 * Filter application events types.
 * Allowed and/or disallowed event type filtering can be done. The body (parameter) should specify a JSON key/value object that describes the type of event filtering needed. One, or both of the following keys can be designated:<br /><br />"allowed" - Specifies an allowed list of event types<br />"disallowed" - Specifies a disallowed list of event types<br /><br />Further, each of those key's value should be a JSON array that holds zero, or more JSON key/value objects. Each of these objects must contain the following key with an associated value:<br /><br />"type" - The type name of the event to filter<br /><br />The value must be the string name (case sensitive) of the event type that needs filtering. For example:<br /><br />{ "allowed": [ { "type": "StasisStart" }, { "type": "StasisEnd" } ] }<br /><br />As this specifies only an allowed list, then only those two event type messages are sent to the application. No other event messages are sent.<br /><br />The following rules apply:<br /><br />* If the body is empty, both the allowed and disallowed filters are set empty.<br />* If both list types are given then both are set to their respective values (note, specifying an empty array for a given type sets that type to empty).<br />* If only one list type is given then only that type is set. The other type is not updated.<br />* An empty "allowed" list means all events are allowed.<br />* An empty "disallowed" list means no events are disallowed.<br />* Disallowed events take precedence over allowed events if the event type is specified in both lists.
 * 
 * @since ari_4_0_0
 *********************************************************/
public Application filter(String applicationName, String filter) throws RestException;


}
;
