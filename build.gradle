plugins {
    id "java"
    id "jacoco"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.4"
    id "com.github.spotbugs" version "3.0.0"
    id "org.sonarqube" version "2.7.1"
}

group = "ch.loway.oss.ari4java"
version = "0.12.1"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    main {
        java {
            srcDir "src/main/generated"
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    compile "com.fasterxml.jackson.core:jackson-core:2.10.1"
    compile "com.fasterxml.jackson.core:jackson-databind:2.10.1"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.10.1"
    compile "io.netty:netty-all:4.1.44.Final"
    compile "javax.xml.bind:jaxb-api:2.3.1"
    compile "org.slf4j:slf4j-api:1.7.30"

    testCompile "junit:junit:4.10"
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:2.13.0"

}

def build_number = "x"
if (System.getenv("BUILD_NUMBER") != null) {
    build_number = System.getenv("BUILD_NUMBER")
}
task buildProps(type: WriteProperties) {
    outputFile file("src/main/resources/build.properties")
    property "BUILD_NUMBER", build_number
}

jar {
    manifest {
        attributes "Implementation-Title": project.name,
                   "Implementation-Version": project.version
    }
}

javadoc {
    def inc = [
        "ch/loway/oss/ari4java/generated/AriVersion.java",
        "ch/loway/oss/ari4java/generated/actions/*",
        "ch/loway/oss/ari4java/generated/models/*",
        "ch/loway/oss/ari4java/*",
        "ch/loway/oss/ari4java/tools/*",
        "ch/loway/oss/ari4java/tools/*/*"
    ]
    includes = inc.toSet()
    options.overview = "src/overview.html"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    jacoco {
        excludes = ["**/generated/**"]
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        xml.destination = file("${buildDir}/reports/jacocoTestReport.xml")
        html.destination = file("${buildDir}/reports/jacocoTestReport/html")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: "**/generated/**")
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.3
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: "**/generated/**")
        }))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "ari4java"
        property "sonar.organization", "ari4java"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_LOGIN")
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacocoTestReport.xml"
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

def projectUrl = "http://github.com/l3nz/ari4java"
def pomConfig = {
    licenses {
        license {
            name "LPGL-3.0"
        }
    }
    developers {
        developer {
            name "lenz e."
            email "nomail@home"
        }
    }
    scm {
        url projectUrl
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            groupId = "ch.loway.oss.ari4java"
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "Asterisk ARI interface bindings for Java")
                root.appendNode("name", project.name)
                root.appendNode("url", projectUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key =  System.getenv("BINTRAY_KEY")
    publications = ["mavenPublication"]
    publish = true
    pkg {
        repo = "maven"
        name = project.name
        group = "ch.loway.oss.ari4java"
        userOrg = "ari4java"
        licenses = ["LGPL-3.0"]
        vcsUrl = projectUrl
        version {
            name = project.version
            desc = project.version
            released = new Date()
        }
    }
}

// To generate an HTML report instead of XML
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
}
